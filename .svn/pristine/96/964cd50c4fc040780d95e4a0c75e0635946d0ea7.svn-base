//
//  ViewController.swift
//  Expandable
//
//  Created by Gabriel Theodoropoulos on 28/10/15.
//  Copyright Â© 2015 Appcoda. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    
    // MARK: IBOutlet Properties
    var cellDescriptors = [Cell]()
    var visibleRowsPerSection = [[Int]]()
    
    @IBOutlet weak var tblExpandable: UITableView!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        
        cellDescriptors = []
        
    }
    
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        
        configureTableView()
        loadCellDescriptors()
        
    }
    
    func loadCellDescriptors() {
        //        if let path = NSBundle.mainBundle().pathForResource("CellDescriptor", ofType: "plist") {
        //            cellDescriptors = NSMutableArray(contentsOfFile: path)
        //            print(cellDescriptors)
        //        }
        
        let cell = Cell()
        cell.additionalRows = 2
        cell.cellIdentifier = "firstCell"
        cell.isExpandable = 1
        cell.isExpanded = 0
        cell.isVisible = true
        cell.primaryTitle = ""
        cell.secondaryTitle = "Visible Row"
        cell.value = ""
        
        let cell1 = Cell()
        cell1.additionalRows = 2
        cell1.cellIdentifier = "firstInnerCell"
        cell1.isExpandable = 0
        cell1.isExpanded = 0
        cell1.isVisible = true
        cell1.primaryTitle = "Inner Cell"
        cell1.secondaryTitle = ""
        cell1.value = ""
        
        let cell2 = Cell()
        cell2.additionalRows = 2
        cell2.cellIdentifier = "SecondInnerCell"
        cell2.isExpandable = 0
        cell2.isExpanded = 0
        cell2.isVisible = false
        cell2.primaryTitle = "Inner Cell"
        cell2.secondaryTitle = ""
        cell2.value = ""
        
        
        cellDescriptors.append(cell)
        cellDescriptors.append(cell1)
        cellDescriptors.append(cell2)
        
        
        getIndicesOfVisibleRows()
        tblExpandable.reloadData()
        
        print(cellDescriptors[0])
        
    }
    
    
    func getIndicesOfVisibleRows() {
        visibleRowsPerSection.removeAll()
        
   //     for currentSectionCells in cellDescriptors {
        
        
            
            var visibleRows = [Int]()
            for i in cellDescriptors {
                
                if i.isVisible as Bool == true {
                    // Add the index of the object with isVisible set to true
                    // To array visibleRow
                    // visibleRows.append(row.index)
            
                    visibleRows.append(i.accessibilityElementCount())
                }
                
//                else {
//                    visibleRows.append(0)
//                }
                visibleRowsPerSection.append(visibleRows)
                
            }
        
        
        
            
        
  //      }
        
        // Working
//        for currentSectionCells in cellDescriptors {
//            var visibleRows = [Int]()
//            
//            
//            if currentSectionCells.isVisible as Bool == true {
//                visibleRows.append(1)
//            }
//            
//            
//            visibleRowsPerSection.append(visibleRows)
//        }
        
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    // MARK: Custom Functions
    
    func configureTableView() {
        tblExpandable.delegate = self
        tblExpandable.dataSource = self
        tblExpandable.tableFooterView = UIView(frame: CGRectZero)
        
        tblExpandable.registerNib(UINib(nibName: "NormalCell", bundle: nil), forCellReuseIdentifier: "idCellNormal")
        //        tblExpandable.registerNib(UINib(nibName: "TextfieldCell", bundle: nil), forCellReuseIdentifier: "idCellTextfield")
        //        tblExpandable.registerNib(UINib(nibName: "DatePickerCell", bundle: nil), forCellReuseIdentifier: "idCellDatePicker")
        //        tblExpandable.registerNib(UINib(nibName: "SwitchCell", bundle: nil), forCellReuseIdentifier: "idCellSwitch")
        //        tblExpandable.registerNib(UINib(nibName: "ValuePickerCell", bundle: nil), forCellReuseIdentifier: "idCellValuePicker")
        //        tblExpandable.registerNib(UINib(nibName: "SliderCell", bundle: nil), forCellReuseIdentifier: "idCellSlider")
    }
    
    
    // MARK: UITableView Delegate and Datasource Functions
    
    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        if cellDescriptors.count > 0 {
            return cellDescriptors.count
        }
        else {
            return 0
        }
    }
    
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return visibleRowsPerSection[section].count
    }
    
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        
        return cell
    }
    
    
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        let currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)
        
        switch currentCellDescriptor.cellIdentifier {
        case "firstCell":
            return 60.0
            
            //        case "idCellDatePicker":
            //            return 270.0
            
        default:
            return 44.0
        }
    }
    
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        
    }
    
    
    func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            return "Personal"
            
        case 1:
            return "Preferences"
            
        default:
            return "Work Experience"
        }
    }
    
    // MARK: Helpers
    
    // Get cell descriptor for indexPath
    // Get the cell object that matches the roll
    func getCellDescriptorForIndexPath(indexPath: NSIndexPath) -> Cell {
        let indexOfVisibleRow = visibleRowsPerSection[indexPath.section][indexPath.row]
        let cellDescriptor = cellDescriptors[indexOfVisibleRow]
        return cellDescriptor
    }
    
    
    
}
